
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.TitledBorder;

import org.jvnet.substance.SubstanceLookAndFeel;

public class ClientA implements ActionListener {

    public JLabel clientALbl = new JLabel("Client A");
    public JTextArea t1 = new JTextArea("");
    public JTextField c1 = new JTextField("");
    public JScrollPane sc = new JScrollPane();

    public JTextField c2 = new JTextField("");

    public JButton browseBtn = new JButton("Browse");

    public Font l3 = new Font("Times New roman", Font.BOLD, 14);

    public JTextArea msg = new JTextArea();
    public JScrollPane msgsc = new JScrollPane();

    public JLabel fileSelect = new JLabel("Select The File           :");
    public JLabel wormFile = new JLabel("Select The Worm       :");
    public JLabel connectionLbl = new JLabel("Connection:");
    public Font toh = new Font("tahoma", Font.BOLD, 24);
    public JFrame jf;
    public Container c;
    public JLabel title = new JLabel("Automated Insider Threat Detection System Using User and Role-Based Profile Assessment");

    public JButton sendBtn = new JButton("Send");
    public JButton exitBtn = new JButton("Exit");

    public JComboBox jcombo1;
    public JComboBox jcombo2;

    public String text = "", clnname;
    public String[] jcmb = {"No Worm", "stuxnet.exe", "codered.exe",
        "koodface.exe"};
    public String[] jcmb1 = {"Switch OFF", "Switch ON"};
    String filesend, connect;

    ClientA() {

        jf = new JFrame("Client A");
        c = jf.getContentPane();
        c.setLayout(null);
        jf.setSize(900, 650);
        jf.setResizable(false);
        c.setBackground(new Color(0, 102, 102));

        title.setBounds(40, 5, 1000, 45);
        title.setFont(toh);
        title.setForeground(Color.white);

        fileSelect.setBounds(80, 185, 700, 45);
        fileSelect.setFont(l3);
        fileSelect.setForeground(Color.cyan);

        wormFile.setBounds(80, 240, 700, 45);
        wormFile.setFont(l3);
        wormFile.setForeground(Color.cyan);
        connectionLbl.setBounds(80, 290, 220, 40);
        connectionLbl.setFont(l3);
        connectionLbl.setForeground(Color.CYAN);

        TitledBorder leftBorder = BorderFactory
                .createTitledBorder("Input File");
        leftBorder.setTitleColor(Color.ORANGE);
        JLabel inputFile = new JLabel();
        inputFile.setBorder(leftBorder);
        inputFile.setBounds(35, 140, 400, 400);
        leftBorder.setTitleColor(Color.ORANGE);

        TitledBorder receiveBorder = BorderFactory
                .createTitledBorder("Received File");
        receiveBorder.setTitleColor(Color.ORANGE);
        JLabel receiveFile = new JLabel();
        receiveFile.setBorder(receiveBorder);
        receiveFile.setBounds(470, 140, 400, 400);
        receiveBorder.setTitleColor(Color.ORANGE);

        browseBtn.setBounds(260, 190, 130, 28);
        browseBtn.setFont(l3);
        browseBtn.setForeground(new Color(120, 51, 51));

        jcombo1 = new JComboBox(jcmb);
        jcombo1.setBounds(260, 240, 130, 28);
        jcombo1.setFont(l3);
        jcombo1.setForeground(Color.blue);

        jcombo2 = new JComboBox(jcmb1);
        jcombo2.setBounds(260, 290, 130, 28);
        jcombo2.setFont(l3);
        jcombo2.setForeground(Color.RED);

        sendBtn.setBounds(190, 370, 130, 28);
        sendBtn.setFont(l3);
        sendBtn.setForeground(new Color(120, 51, 51));

        exitBtn.setBounds(190, 470, 130, 28);
        exitBtn.setFont(l3);
        exitBtn.setForeground(new Color(120, 51, 51));

        t1.setColumns(20);
        t1.setRows(10);
        t1.setForeground(Color.MAGENTA);
        t1.setFont(l3);
        sc.setViewportView(t1);

        sc.setBounds(510, 193, 320, 300);

        c2.setBounds(270, 625, 180, 28);
        c2.setFont(l3);
        c2.setForeground(Color.BLUE);

        clientALbl.setBounds(370, 80, 200, 35);
        clientALbl.setForeground(Color.white);

        msg.setRows(10);
        msg.setColumns(15);
        msgsc.setViewportView(msg);
        msgsc.setBounds(640, 420, 290, 150);
        msg.setForeground(new Color(120, 0, 0));
        msg.setFont(l3);

        jcombo2.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                JComboBox jcmbType = (JComboBox) e.getSource();

                String cmbType = (String) jcmbType.getSelectedItem();

                if (cmbType.equals("Switch OFF")) {
                    connect = "Switch OFF";

                } else if (cmbType.equals("Switch ON")) {

                    connect = "Switch ON";
                }
            }
        });

        c.add(title);

        c.add(fileSelect);
        c.add(wormFile);
        c.add(sendBtn);
        c.add(exitBtn);

        sendBtn.addActionListener(this);
        exitBtn.addActionListener(this);

        c.add(jcombo1);
        c.add(jcombo2);

        c.add(connectionLbl);
        c.add(browseBtn);

        c.add(clientALbl);
        c.add(sc);
        c.add(receiveFile);
        c.add(inputFile);

        clientALbl.setFont(toh);
        browseBtn.addActionListener(this);

        jf.show();
        jf.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent win) {
                System.exit(0);
            }
        });
        int[] ports = new int[]{2001, 3001, 4001, 9000};

        for (int i = 0; i < 4; i++) {
            Thread t = new Thread(new PortListener(ports[i]));
            t.setName("Listener-" + ports[i]);
            t.start();

        }
    }

    public static void main(String args[]) {
        SubstanceLookAndFeel
                .setCurrentTheme("org.jvnet.substance.theme.SubstanceShadeTheme");
        SubstanceLookAndFeel
                .setCurrentButtonShaper("org.jvnet.substance.button.BaseButtonShaper");
        SubstanceLookAndFeel
                .setCurrentGradientPainter("SpecularGradientPainter");
        try {
            UIManager.setLookAndFeel(new SubstanceLookAndFeel());
        } catch (UnsupportedLookAndFeelException e) {

            e.printStackTrace();
        }

        new ClientA();
    }

    public void actionPerformed(ActionEvent e) {
        String strLine;
        if (e.getSource() == browseBtn) {

            JFileChooser chooser = new JFileChooser();

            try {

                File f = new File(new File("").getCanonicalPath());

                chooser.setSelectedFile(f);
            } catch (IOException e1) {
            }

            chooser.showOpenDialog(browseBtn);
            int retval = chooser.showOpenDialog(browseBtn);
            if (retval == JFileChooser.APPROVE_OPTION) {
                File field = chooser.getSelectedFile();
                c1.setText(field.getAbsolutePath());
            }

            File curFile = chooser.getSelectedFile();

            String fname = curFile.getName();
            int len1 = fname.length();
            String strlen = Integer.toString(len1) + " ";
            String dd = strlen + fname;

            try {

                FileInputStream fstream = new FileInputStream(curFile);

                DataInputStream ins = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(
                        ins));

                StringBuffer buffer = new StringBuffer();
                while ((strLine = br.readLine()) != null) {

                    System.out.println(strLine);
                    buffer.append(strLine + "\n");

                }
                t1.setText(buffer.toString());
                String filelen = buffer.toString();
                int len = filelen.length();
                String a = Integer.toString(len);
                c2.setText(a);

            } catch (Exception e1) {
                System.err.println("Error: " + e1.getMessage());
            }
        }
        if (e.getSource() == sendBtn) {
            filesend = "55" + t1.getText().trim();
            String cmbType = (String) jcombo1.getSelectedItem();

            if (cmbType.equals("stuxnet.exe")) {
                try {

                    FileInputStream fstream = new FileInputStream(
                            "D:/WormFiles/stuxnet.exe");

                    DataInputStream ins = new DataInputStream(fstream);
                    BufferedReader br = new BufferedReader(
                            new InputStreamReader(ins));

                    StringBuffer buffer = new StringBuffer();
                    try {
                        while ((strLine = br.readLine()) != null) {

                            buffer.append(strLine + "\n");
                        }
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                    int fv = buffer.length();
                    filesend = buffer.toString().trim() + t1.getText().trim();
                } catch (FileNotFoundException e1) {
                    e1.printStackTrace();
                }

            } else if (cmbType.equals("codered.exe")) {

                try {

                    FileInputStream fstream = new FileInputStream(
                            "D:/WormFiles/codered.exe");

                    DataInputStream ins = new DataInputStream(fstream);
                    BufferedReader br = new BufferedReader(
                            new InputStreamReader(ins));
                    StringBuffer buffer = new StringBuffer();

                    try {
                        while ((strLine = br.readLine()) != null) {

                            buffer.append(strLine + "\n");

                        }
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                    int fv = buffer.length();
                    filesend = buffer.toString().trim() + t1.getText().trim();

                } catch (FileNotFoundException e1) {
                    e1.printStackTrace();
                }
            } else if (cmbType.equals("koodface.exe")) {

                try {

                    FileInputStream fstream = new FileInputStream(
                            "D:/WormFiles/koodface.exe");

                    DataInputStream ins = new DataInputStream(fstream);
                    BufferedReader br = new BufferedReader(
                            new InputStreamReader(ins));
                    StringBuffer buffer = new StringBuffer();
                    try {
                        while ((strLine = br.readLine()) != null) {
                            buffer.append(strLine + "\n");

                        }
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                    int fv = buffer.length();
                    filesend = buffer.toString().trim() + t1.getText().trim();

                } catch (FileNotFoundException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
            }

            BufferedOutputStream bos = null;

            ServerSocket server;
            Socket connection;
            byte[] byteArray;
            Socket client;

            try {
                /**
                 * ****************** RouterB IP Address ***************
                 */
                client = new Socket("127.0.0.1", 1001);
                bos = new BufferedOutputStream(client.getOutputStream());

                byteArray = filesend.toString().getBytes();
                bos.write(byteArray, 0, byteArray.length);
                bos.flush();
                bos.close();
                client.close();
            } catch (UnknownHostException e1) {

                e1.printStackTrace();
            } catch (IOException e1) {
            } finally {
            }

            try {
                /**
                 * ****************** RouterB IP Address ***************
                 */
                client = new Socket("127.0.0.1", 1002);
                bos = new BufferedOutputStream(client.getOutputStream());

                byteArray = filesend.toString().getBytes();
                bos.write(byteArray, 0, byteArray.length);
                bos.flush();
                bos.close();
                client.close();
            } catch (UnknownHostException e1) {

                e1.printStackTrace();
            } catch (IOException e1) {
            } finally {
            }

            try {
                /**
                 * ****************** RouterB IP Address ***************
                 */
                client = new Socket("127.0.0.1", 1003);
                bos = new BufferedOutputStream(client.getOutputStream());

                byteArray = filesend.toString().getBytes();
                bos.write(byteArray, 0, byteArray.length);
                bos.flush();
                bos.close();
                client.close();
            } catch (UnknownHostException e1) {

                e1.printStackTrace();
            } catch (IOException e1) {
            } finally {
            }

        }
        if (e.getSource() == exitBtn) {

            jf.dispose();
            System.exit(0);
        }
    }

    class PortListener implements Runnable {

        BufferedOutputStream bos = null;

        ServerSocket server;
        Socket connection;
        BufferedReader br = null;
        int port;

        public PortListener(int port) {
            this.port = port;
        }

        public void run() {
            if (this.port == 2001 || this.port == 3001 || this.port == 4001) {
                try {
                    server = new ServerSocket(port);

                    while (true) {
                        connection = server.accept();
                        br = new BufferedReader(new InputStreamReader(
                                new BufferedInputStream(
                                        connection.getInputStream())));

                        String strLine;

                        StringBuffer buffer = new StringBuffer();
                        while ((strLine = br.readLine()) != null) {

                            System.out.println(strLine);
                            buffer.append(strLine + "\n");

                        }
                        br.close();
                        connection.close();

                        if (connect.trim().equals("Switch OFF")) {

                        } else if (connect.trim().equals("Switch ON")) {
                            JFrame frame = new JFrame();

                            int n = JOptionPane
                                    .showConfirmDialog(
                                            frame,
                                            "Message Now Receiving to Client A Are You like To Scan?",
                                            "Message Box",
                                            JOptionPane.YES_NO_OPTION);

                            if (n == 0) {

                                new ScanA();

                                BufferedOutputStream bos = null;
                                ServerSocket server;
                                Socket connection;
                                byte[] byteArray;
                                Socket client = null;

                                try {
                                    /**
                                     * ****************** RouterB IP Address ***************
                                     */
                                    client = new Socket("127.0.0.1", 6000);
                                    bos = new BufferedOutputStream(
                                            client.getOutputStream());

                                    byteArray = ("A" + buffer.toString())
                                            .getBytes();
                                    bos.write(byteArray, 0, byteArray.length);
                                    bos.flush();
                                    bos.close();
                                    client.close();
                                } catch (UnknownHostException e1) {

                                    e1.printStackTrace();
                                } catch (IOException e1) {

                                } finally {

                                }

                            } else if (n == 1) {
                            }
                        }

                    }
                } catch (Exception e1) {
                    System.err.println("Error: " + e1.getMessage());
                }

            } else if (this.port == 9000) {

                try {

                    server = new ServerSocket(9000);

                    while (true) {
                        connection = server.accept();
                        br = new BufferedReader(new InputStreamReader(
                                new BufferedInputStream(
                                        connection.getInputStream())));

                        String strLine;

                        StringBuffer buffer = new StringBuffer();
                        while ((strLine = br.readLine()) != null) {

                            System.out.println(strLine);
                            buffer.append(strLine + "\n");

                        }
                        br.close();
                        connection.close();
                        t1.setText(buffer.toString());

                    }

                } catch (Exception e1) {
                    System.err.println("Error: " + e1.getMessage());
                }

            }

        }

    }
}
